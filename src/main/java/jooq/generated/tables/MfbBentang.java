/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import jooq.generated.Keys;
import jooq.generated.Zdq;
import jooq.generated.tables.records.MfbBentangRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MfbBentang extends TableImpl<MfbBentangRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>zdq.mfb_bentang</code>
     */
    public static final MfbBentang MFB_BENTANG = new MfbBentang();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MfbBentangRecord> getRecordType() {
        return MfbBentangRecord.class;
    }

    /**
     * The column <code>zdq.mfb_bentang.sn</code>.
     */
    public final TableField<MfbBentangRecord, String> SN = createField(DSL.name("sn"), SQLDataType.VARCHAR(2).nullable(false), this, "");

    /**
     * The column <code>zdq.mfb_bentang.bentang</code>.
     */
    public final TableField<MfbBentangRecord, String> BENTANG = createField(DSL.name("bentang"), SQLDataType.VARCHAR(21).nullable(false), this, "");

    private MfbBentang(Name alias, Table<MfbBentangRecord> aliased) {
        this(alias, aliased, null);
    }

    private MfbBentang(Name alias, Table<MfbBentangRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>zdq.mfb_bentang</code> table reference
     */
    public MfbBentang(String alias) {
        this(DSL.name(alias), MFB_BENTANG);
    }

    /**
     * Create an aliased <code>zdq.mfb_bentang</code> table reference
     */
    public MfbBentang(Name alias) {
        this(alias, MFB_BENTANG);
    }

    /**
     * Create a <code>zdq.mfb_bentang</code> table reference
     */
    public MfbBentang() {
        this(DSL.name("mfb_bentang"), null);
    }

    public <O extends Record> MfbBentang(Table<O> child, ForeignKey<O, MfbBentangRecord> key) {
        super(child, key, MFB_BENTANG);
    }

    @Override
    public Schema getSchema() {
        return Zdq.ZDQ;
    }

    @Override
    public UniqueKey<MfbBentangRecord> getPrimaryKey() {
        return Keys.KEY_MFB_BENTANG_PRIMARY;
    }

    @Override
    public List<UniqueKey<MfbBentangRecord>> getKeys() {
        return Arrays.<UniqueKey<MfbBentangRecord>>asList(Keys.KEY_MFB_BENTANG_PRIMARY);
    }

    @Override
    public MfbBentang as(String alias) {
        return new MfbBentang(DSL.name(alias), this);
    }

    @Override
    public MfbBentang as(Name alias) {
        return new MfbBentang(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MfbBentang rename(String name) {
        return new MfbBentang(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MfbBentang rename(Name name) {
        return new MfbBentang(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
